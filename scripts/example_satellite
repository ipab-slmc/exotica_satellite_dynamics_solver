#!/usr/bin/env python
from __future__ import print_function, division

import pyexotica as exo
import exotica_ddp_solver_py
from pyexotica.publish_trajectory import *
import signal, sys
from time import time, sleep
import numpy as np
import matplotlib.pyplot as plt
import pickle



save_result = False
load_last = True
warmstart = False






exo.Setup.init_ros()
sleep(0.2)


# markers
# ===================================================================
import roslib; roslib.load_manifest('visualization_marker_tutorials')
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray
import rospy
import math
from geometry_msgs.msg import Point

topic = 'visualization_marker_array'
publisher = rospy.Publisher(topic, MarkerArray, queue_size=300)
publisher_jets = rospy.Publisher('jets', MarkerArray, queue_size=300)

rospy.init_node('register')
rospy.sleep(0.5)

markerArray = MarkerArray()
markerJets = MarkerArray()

thruster_names = ["thruster_bot_0", "thruster_top_0", "thruster_bot_1", "thruster_bot_2", "thruster_bot_3", "thruster_bot_4", "thruster_bot_5", "thruster_bot_6", "thruster_bot_7", "thruster_bot_8", "thruster_top_1", "thruster_top_2", "thruster_top_3", "thruster_top_4", "thruster_top_5", "thruster_top_6", "thruster_top_7", "thruster_top_8"]

def create_marker(marker_id, scale, pos, orientation, color, marker_type, ns="", mesh="package://exotica_satellite_dynamics_solver/resources/robots/satellite/satellite_base.dae"):
    marker = Marker()
    marker.id = marker_id
    marker.header.frame_id = "exotica/world_frame"
    marker.type = marker_type
    marker.action = marker.ADD
    if 'x' in scale:
        marker.scale.x = scale['x']
    if 'y' in scale:
        marker.scale.y = scale['y']
    if 'z' in scale:
        marker.scale.z = scale['z']
    marker.color.a = color['a']
    marker.color.r = color['r']
    marker.color.g = color['g']
    marker.color.b = color['b']
    marker.ns = ns

    marker.pose.orientation.x = orientation['x']
    marker.pose.orientation.y = orientation['y']
    marker.pose.orientation.z = orientation['z']
    marker.pose.orientation.w = orientation['w']
    marker.pose.position.x = pos['x']
    marker.pose.position.y = pos['y']
    marker.pose.position.z = pos['z']
    if marker.type == marker.MESH_RESOURCE:
        marker.mesh_resource = mesh
        marker.mesh_use_embedded_materials = True

    return marker

# ===================================================================


# solver_l2 = exo.Setup.load_solver('{exotica_satellite_dynamics_solver}/resources/config.apollo.l2.xml')
# solution_l2 = solver_l2.solve()
# solver = exo.Setup.load_solver('{exotica_satellite_dynamics_solver}/resources/config.apollo.xml')
# solver = exo.Setup.load_solver('{exotica_satellite_dynamics_solver}/resources/config.com.track.xml')
# solver = exo.Setup.load_solver('{exotica_satellite_dynamics_solver}/resources/config.com.track.2.xml')
solver = exo.Setup.load_solver('{exotica_satellite_dynamics_solver}/resources/config.com.track.3.xml')
# solver = exo.Setup.load_solver('{exotica_satellite_dynamics_solver}/resources/config.movez.xml')
# solver = exo.Setup.load_solver('{exotica_satellite_dynamics_solver}/resources/config.rotate.inplace.xml')

problem = solver.get_problem()
scene = problem.get_scene()
ds = scene.get_dynamics_solver()

if not load_last:

    if warmstart:
        data = pickle.load(open('warmstart_satellite.p', 'rb'))
        times = data['times']
        warm_solution = data['solution']
        X = data['trajectory']
        for t in range(solver.get_problem().T - 1):
            u0 = warm_solution[t,:]
            problem.update(u0, t)

    print("nq", ds.nq)
    print("nv", ds.nv)
    print("nu", ds.nu)
    print("ndx", ds.ndx)
    print("problem.num_positions", problem.num_positions)

    solution = solver.solve()

    print('Solver took', solver.get_planning_time())
    print('Solver terminated with: ', problem.termination_criterion)

    # Roll out to update internal problem.X
    # for t in range(problem.T - 1):
    #     problem.update(solution[t,:],t)

    # Print final state to see the velocities....
    print("Final state:", problem.X[:,-1])

    costs = problem.get_cost_evolution()
    save_result and np.savez('satellite_results', times=costs[0], costs=costs[1], X=problem.X, U=problem.U, solution=solution)

    # '''
    fig_convergence = plt.figure(1)
    fig_convergence.set_dpi(300)
    plt.plot(costs[1], label='Total Cost')
    plt.plot(np.array(costs[1])-np.array(solver.control_cost_evolution), label='Task')
    plt.plot(solver.control_cost_evolution, label='Control Cost')
    # plt.tight_layout()
    plt.legend()
    plt.xlim(0)
    plt.grid()
    plt.xlabel('Iteration')
    plt.ylabel('Cost')
    plt.yscale('log')

    # Cost per timestep
    tasks = problem.cost.task_maps
    cost_by_task_and_timestep = {}
    for task in tasks:
        cost_by_task_and_timestep[task] = np.zeros((problem.T,))
    for t in range(problem.T):
        for task in tasks:
            rho = problem.cost.get_rho(task, t)
            error = problem.cost.get_task_error(task, t)
            cost_by_task_and_timestep[task][t] = rho * np.dot(error, error.T)
            #print(task, t, rho, error, cost_by_task_and_timestep[task][t])
    cost_by_task_and_timestep['Control Cost'] = np.zeros((problem.T,))
    for t in range(problem.T-1):
        cost_by_task_and_timestep['Control Cost'][t] = problem.get_control_cost(t)

    fig_cost = plt.figure(2)
    fig_cost.set_dpi(300)
    for task in cost_by_task_and_timestep:
        plt.plot(cost_by_task_and_timestep[task], label=task)
    # plt.tight_layout()
    plt.xlim(0)
    plt.ylabel('Cost')
    plt.xlabel('Timestep')
    plt.yscale('log')
    plt.legend()

    fig_control = plt.figure(3)
    plt.plot(solution)

    # fig, ax = plt.subplots(5, 3)
    # ax = ax.flatten()

    times = [0]
    for i in range(problem.T - 1):
        times.append(times[i - 1] + problem.tau)
    times = times[1:]

    # print(((problem.X[0,1:] - problem.X[0,:-1])/0.1)[0:30])
    # print('=' * 50)
    # print(problem.X[7,1:31])
    # print(problem.X[8,1:31])
    # print(problem.X[9,1:31])


if load_last:
    data = pickle.load(open('example_satellite.p', 'rb'))
    times = data['times']
    solution = data['solution']
    X = data['trajectory']
else:
    pickle.dump({
        'times': times, 
        'solution': solution,
        'trajectory': problem.X
    }, open('example_satellite.p', 'wb'))
    X = problem.X

# exit(0)
# for i in range(solution.shape[1]):
#     ax[i].plot(times, solution[:,i])
#     ax[i].set_xlabel('time (s.)')
#     ax[i].set_ylabel('u[{0}]'.format(i))
    
    # if i < 10:
        # ax[i].set_ylim(0, 440)

# plt.figure()
# fig, ax = plt.subplots(1, 3, figsize=(20, 6))

# ax[0].plot(solution)

# ax[0].set_xlabel('Knot')
# ax[0].set_ylabel('Control')
# ax[0].grid()

# ax[1].plot(X[:11,:].T)
# ax[1].set_xlabel('Knot')
# ax[1].set_ylabel('Position')
# ax[1].grid()

# ax[2].plot(X[11:,:].T)
# ax[2].set_xlabel('Knot')
# ax[2].set_ylabel('Velocity')
# ax[2].grid()
# ax[2].hlines(0, 0, 100, color='white')

plt.show()
# '''

# visualization = exo.VisualizationMoveIt(problem.get_scene())
# visualization_traj = np.zeros((problem.num_positions - 1, problem.T))
# for t in range(problem.T):
#     visualization_traj[:,t] = ds.get_position(X[:,t])
# visualization.display_trajectory(visualization_traj.T)

signal.signal(signal.SIGINT, sig_int_handler)
marker_array_published = False

for star_id in range(1000, 1300):
    star = create_marker(
        marker_id=star_id,
        scale={'x': .1, 'y': .1, 'z': .1},
        pos={
            'x': np.random.uniform(-25, 25),
            'y': np.random.uniform(-25, 25),
            'z': np.random.uniform(-25, 25)
        },
        orientation={'x': 0, 'y': 0, 'z': 0, 'w': 1},
        color={'a': .4, 'r': 1, 'g': 1, 'b': 1},
        marker_type=Marker().SPHERE,
        ns='stars'
    )
    markerArray.markers.append(star)

traj_line = create_marker(
    marker_id=0,
    scale={'x': .15},
    pos={'x': 0, 'y': 0, 'z': 0},
    orientation={'x': 0, 'y': 0, 'z': 0, 'w': 1},
    color={'a': .6, 'r': 1, 'g': 1, 'b': 1},
    marker_type=Marker().LINE_STRIP,
    ns='traj_line'
)

start = X[:ds.nq,0]
end = problem.X_star[:ds.nq,-1] #X[:ds.nq,-1]

start_marker = create_marker(
    marker_id=1,
    scale={'x': 1, 'y': 1, 'z': 1},
    pos={'x': start[0], 'y': start[1], 'z': start[2]},
    orientation={'x': start[3], 'y': start[4], 'z': start[5], 'w': start[6]},
    color={'a': .4, 'r': 1, 'g': 1, 'b': 1},
    marker_type=Marker().MESH_RESOURCE,
    ns='start_marker'
)
end_marker = create_marker(
    marker_id=2,
    scale={'x': 1, 'y': 1, 'z': 1},
    pos={'x': end[0], 'y': end[1], 'z': end[2]},
    orientation={'x': end[3], 'y': end[4], 'z': end[5], 'w': end[6] },
    color={'a': .4, 'r': 1, 'g': 1, 'b': 1},
    marker_type=Marker().MESH_RESOURCE,
    ns='end_marker'
)

background = create_marker(
    marker_id=3,
    scale={'x': 10, 'y': 7, 'z': 10},
    pos={'x': -10, 'y': 15, 'z': 0},
    # orientation={'x': 0, 'y': 0, 'z': 0, 'w': 1},
    orientation={'x': 0.7071, 'y': -0.7071, 'z': 0, 'w': 0},
    color={'a': 1, 'r': 0, 'g': 0, 'b': 0},
    marker_type=Marker().MESH_RESOURCE,
    mesh="package://exotica_satellite_dynamics_solver/resources/robots/galaxy/background.dae",
    ns='background'
)


target_marker = Marker()
target_marker.header.frame_id = 'exotica/world_frame'
target_marker.action = Marker.ADD
target_marker.type = Marker.SPHERE
target_marker.scale.x = target_marker.scale.y = target_marker.scale.z = 0.5
target_marker.pose.position.x = 10
target_marker.pose.position.y = 10
target_marker.pose.position.z = 10
target_marker.pose.orientation.w = 1.0
target_marker.color.a = 1.0
target_marker.color.r = 1.0
target_marker.id = 1

def create_jets():
    markerJets.markers = []
    for i in range(ds.nu):
        marker = Marker()
        marker.header.stamp = rospy.Time.now()
        marker.header.frame_id = 'exotica/'+thruster_names[i]
        marker.action = Marker.ADD
        marker.type = Marker.MESH_RESOURCE
        marker.ns = thruster_names[i]
        marker.scale.x = marker.scale.y = marker.scale.z = 1.0
        marker.pose.position.x = 0
        marker.pose.position.y = 0
        marker.pose.position.z = 0
        marker.pose.orientation.x = 0.0
        marker.pose.orientation.y = -0.7071068
        marker.pose.orientation.z = 0.0
        marker.pose.orientation.w = 0.7071068
        marker.color.a = -1.0
        marker.id = i
        marker.frame_locked = True
        marker.mesh_resource = 'package://exotica_satellite_dynamics_solver/resources/robots/satellite/jet.dae'
        marker.mesh_use_embedded_materials = True
        markerJets.markers.append(marker)

create_jets()

while True:
    try:
        background.pose.position.x = -10
        background.pose.position.y = 13
        background.pose.position.z = 0

        s = time()
        for t in range(problem.T - 1):
            background.pose.position.y -= 0.01
            update_start = time()
            u = solution[t,:]

            # u = [100, 0, 0,  0, 0, 0,  0, 0, 0, 0,    10, 0, 0]
            # print(u, t)
            # problem.update(u, t)
            # scene.update(ds.get_position(X[:,t]))

            scene.set_model_state(ds.get_position(X[:,t]))
            # print(X[:,t])

            if not marker_array_published:
                p = Point()
                p.x = X[0,t]
                p.y = X[1,t]
                p.z = X[2,t]
                traj_line.points.append(p)

            for i in range(ds.nu):
                val = u[i] / 70.0
                if i > 2:
                    val *= 2.0
                markerJets.markers[i].scale.x = markerJets.markers[i].scale.y = markerJets.markers[i].scale.z = val

            publisher.publish(markerArray)
            publisher_jets.publish(markerJets)

            # marker with overlay for satellite
            problem.get_scene().get_kinematic_tree().publish_frames()
            update_end = time()
            # if problem.tau > update_end - update_start:
                # sleep(problem.tau - (update_end - update_start))
            sleep(0.01)
        e = time()
        sleep(1)
        print("Time taken to roll-out:", e-s)

        if not marker_array_published:
            markerArray.markers.append(traj_line)
            markerArray.markers.append(target_marker)
            # markerArray.markers.append(start_marker)
            # markerArray.markers.append(end_marker)
            # markerArray.markers.append(background)
            marker_array_published = True

    except KeyboardInterrupt:
        break
    # break
